//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Company.UI.CompanyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CompanyService.ICompanyService")]
    public interface ICompanyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetEmployees", ReplyAction="http://tempuri.org/ICompanyService/GetEmployeesResponse")]
        Company.Models.Employee[] GetEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetEmployees", ReplyAction="http://tempuri.org/ICompanyService/GetEmployeesResponse")]
        System.Threading.Tasks.Task<Company.Models.Employee[]> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetEmployeeById", ReplyAction="http://tempuri.org/ICompanyService/GetEmployeeByIdResponse")]
        Company.Models.Employee GetEmployeeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetEmployeeById", ReplyAction="http://tempuri.org/ICompanyService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<Company.Models.Employee> GetEmployeeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/UpdateEmployee", ReplyAction="http://tempuri.org/ICompanyService/UpdateEmployeeResponse")]
        Company.Models.Employee UpdateEmployee(Company.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/UpdateEmployee", ReplyAction="http://tempuri.org/ICompanyService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<Company.Models.Employee> UpdateEmployeeAsync(Company.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/RemoveEmployee", ReplyAction="http://tempuri.org/ICompanyService/RemoveEmployeeResponse")]
        void RemoveEmployee(Company.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/RemoveEmployee", ReplyAction="http://tempuri.org/ICompanyService/RemoveEmployeeResponse")]
        System.Threading.Tasks.Task RemoveEmployeeAsync(Company.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/CreateEmployee", ReplyAction="http://tempuri.org/ICompanyService/CreateEmployeeResponse")]
        Company.Models.Employee CreateEmployee(Company.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/CreateEmployee", ReplyAction="http://tempuri.org/ICompanyService/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<Company.Models.Employee> CreateEmployeeAsync(Company.Models.Employee employee);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompanyServiceChannel : Company.UI.CompanyService.ICompanyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompanyServiceClient : System.ServiceModel.ClientBase<Company.UI.CompanyService.ICompanyService>, Company.UI.CompanyService.ICompanyService {
        
        public CompanyServiceClient() {
        }
        
        public CompanyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompanyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Company.Models.Employee[] GetEmployees() {
            return base.Channel.GetEmployees();
        }
        
        public System.Threading.Tasks.Task<Company.Models.Employee[]> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public Company.Models.Employee GetEmployeeById(int id) {
            return base.Channel.GetEmployeeById(id);
        }
        
        public System.Threading.Tasks.Task<Company.Models.Employee> GetEmployeeByIdAsync(int id) {
            return base.Channel.GetEmployeeByIdAsync(id);
        }
        
        public Company.Models.Employee UpdateEmployee(Company.Models.Employee employee) {
            return base.Channel.UpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<Company.Models.Employee> UpdateEmployeeAsync(Company.Models.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public void RemoveEmployee(Company.Models.Employee employee) {
            base.Channel.RemoveEmployee(employee);
        }
        
        public System.Threading.Tasks.Task RemoveEmployeeAsync(Company.Models.Employee employee) {
            return base.Channel.RemoveEmployeeAsync(employee);
        }
        
        public Company.Models.Employee CreateEmployee(Company.Models.Employee employee) {
            return base.Channel.CreateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<Company.Models.Employee> CreateEmployeeAsync(Company.Models.Employee employee) {
            return base.Channel.CreateEmployeeAsync(employee);
        }
    }
}
